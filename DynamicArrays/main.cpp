#include <iostream>
using namespace std;
#define tab "\t"

void FillRand(int arr[], const int n); //заполняет массив случайнми числами
void Print(int* arr, const int n);	//выводит массив на экран

void main()
{
	setlocale(LC_ALL, "ru");
	int n;
	cout << "Введите размер массива: "; cin >> n;
	//1. Объявление динамического массива:
	int* arr = new int[n]; //указываем на массив 
	//2. Использование динамического массива:
	FillRand(arr, n);
	Print(arr, n);
	//3. Удаление динамического массива:
	delete[] arr;
}
	
void FillRand(int arr[], const int n) //заполнить рандом
{
	for (int i = 0; i < n; i++)
	{
		//Доступ к элементам массива через арифметику
		//указателей и оператор разыменования:
		*(arr + i) = rand();
	}
	cout << endl;
}

void Print(int* arr, const int n) //показать
{
	for (int i = 0; i < n; i++)
	{
		//Доступ к элементам массива через оператор
		//индексирования (Subscript operator)
		cout << arr[i] << tab;
	}

}
/*
	 Размер статического массива может быть задан
	только целочисленным константным значением
	и только во время написания кода.
	 Размер статического массива невозможно изменить
	после компиляции.
	 Размер же динамического массива может быть задан
	переменным значением во время выполнения программы.
	Предварительно эта переменное значение можно
	вычислить либо ввести с клавиатуры.

	 Для того чтобы объявить динамический массив нужно объявить
	указатель и выделить память при помощи оператора 'new'.
	 Оператор new выделяет память для [n] элементов
	заданного типа, в данном случае int. И возвращает
	адрес выделенной памяти. Этот адрес мы записываем
	в наш указатель.
	 Оператор new всегда выделяет непрерывный блок памяти.

	 Обращаться к элементам динамического массива можно
	точно также как к элементам статического массива.
	То есть исполььзуя арифметику указателей и оператор
	разыменования или же через опретор индексирования.
	И в том и в другом случае доступ к элементам массива
	осуществляется за константное время, поскольку
	сводится к операции сложения.

	 Передача динамического массива в функцию.
	Динамический массив можно передать в функцию точно также
	как статический массив.
	 
	 После того как динамический массив уже не нужен, его нужно
	удалить, чтобы освободить память, которую он занимам и чтобы
	эту память можно было использовать в других целях.
	Для удаления динамического массива, используется оператор
	delete[].

	  Оператор new фактически запрашивает память у операционнй 
	 системы и если у ОС есть непрерывный блок памяти нужного размера
	 то она его выделяет. В противном случае возникает исключения. 
	 После того как мы воспользовались памятью, ее нужно вернуть
	 обратно ОС.(Именно это и делает оператор delete[] arr;)
	 Оператор delete освобождает память по указанному адресу 
	 и абсолютно ничего не делает с указателем.

	  Если только брать(выделять) память и никогда ее не
	  освобождать, то рано или поздно свободная оперативная память
	  в ОС закончится. И это в свою очередб закончится
	  крахом нашего приложения, ОС аварийно завершит его работу.
	*/